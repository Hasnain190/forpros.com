{"ast":null,"code":"import _defineProperty from\"E:/forpros.com/forpros.com/backend/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"E:/forpros.com/forpros.com/backend/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"E:/forpros.com/forpros.com/backend/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{Redirect}from'react-router-dom';import{resetUserPasswordConfirm}from'../../actions/userActions';import{Form,Button}from'react-bootstrap';import{useDispatch,useSelector}from'react-redux';import Message from'../../components/Message';import Loader from'../../components/Loader';import FormContainer from'../../components/FormContainer';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function ResetPasswordConfirmScreen(_ref){var match=_ref.match,history=_ref.history;var _useState=useState(''),_useState2=_slicedToArray(_useState,2),message=_useState2[0],setMessage=_useState2[1];var id=match.params.id;var token=match.params.token;var dispatch=useDispatch();var _useState3=useState({new_password:'',re_new_password:''}),_useState4=_slicedToArray(_useState3,2),formData=_useState4[0],setFormData=_useState4[1];var new_password=formData.new_password,re_new_password=formData.re_new_password;var _onChange=function onChange(e){return setFormData(_objectSpread(_objectSpread({},formData),{},_defineProperty({},e.target.name,e.target.value)));};var _onSubmit=function onSubmit(e){e.preventDefault();if(new_password!==re_new_password){setMessage('Password does not match');}else{dispatch(resetUserPasswordConfirm(id,token,new_password,re_new_password));}};var userPasswordResetConfirm=useSelector(function(state){return state.userPasswordResetConfirm;});var error=userPasswordResetConfirm.error,loading=userPasswordResetConfirm.loading,success=userPasswordResetConfirm.success;useEffect(function(){if(success){setMessage('Your password is changed successfully. Next time keep it remember.');history.push('/login');}setMessage('');},[success,history,new_password,re_new_password]);return/*#__PURE__*/_jsxs(FormContainer,{children:[error&&/*#__PURE__*/_jsx(Message,{variant:\"danger\",children:error}),loading&&/*#__PURE__*/_jsx(Loader,{}),message&&/*#__PURE__*/_jsx(Message,{variant:\"danger\",children:message}),/*#__PURE__*/_jsxs(Form,{onSubmit:function onSubmit(e){return _onSubmit(e);},children:[/*#__PURE__*/_jsx(Form.Group,{className:\"form-group\",children:/*#__PURE__*/_jsx(Form.Control,{className:\"form-control\",type:\"password\",placeholder:\"New Password\",name:\"new_password\",value:new_password,onChange:function onChange(e){return _onChange(e);},minLength:\"8\",required:true})}),/*#__PURE__*/_jsx(\"p\",{}),/*#__PURE__*/_jsx(Form.Group,{className:\"form-group\",children:/*#__PURE__*/_jsx(Form.Control,{className:\"form-control\",type:\"password\",placeholder:\"Confirm New Password\",name:\"re_new_password\",value:re_new_password,onChange:function onChange(e){return _onChange(e);},minLength:\"8\",required:true})}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Button,{className:\"btn btn-primary\",type:\"submit\",children:\"Reset Password\"})]})]});}export default ResetPasswordConfirmScreen;","map":{"version":3,"sources":["E:/forpros.com/forpros.com/backend/frontend/src/screens/AccountScreens/ResetPasswordConfirmScreen.js"],"names":["React","useState","useEffect","Redirect","resetUserPasswordConfirm","Form","Button","useDispatch","useSelector","Message","Loader","FormContainer","ResetPasswordConfirmScreen","match","history","message","setMessage","id","params","token","dispatch","new_password","re_new_password","formData","setFormData","onChange","e","target","name","value","onSubmit","preventDefault","userPasswordResetConfirm","state","error","loading","success","push"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { resetUserPasswordConfirm } from '../../actions/userActions';\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../../components/Message'\r\nimport Loader from '../../components/Loader'\r\nimport FormContainer from '../../components/FormContainer'\r\n\r\n\r\nfunction ResetPasswordConfirmScreen({ match, history }) {\r\n    const [message, setMessage] = useState('');\r\n\r\n    const id = match.params.id;\r\n    const token = match.params.token;\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [formData, setFormData] = useState({\r\n        new_password: '',\r\n        re_new_password: ''\r\n    });\r\n\r\n    const { new_password, re_new_password } = formData;\r\n\r\n    const onChange = e => setFormData({ ...formData, [e.target.name]: e.target.value });\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        if (new_password !== re_new_password){\r\n            setMessage('Password does not match')\r\n        }else{\r\n            dispatch(resetUserPasswordConfirm(id, token, new_password, re_new_password));\r\n\r\n        }\r\n\r\n\r\n\r\n    };\r\n    const userPasswordResetConfirm = useSelector(state => state.userPasswordResetConfirm)\r\n    const { error, loading, success } = userPasswordResetConfirm\r\n\r\n    useEffect(() => {\r\n       \r\n        if (success) {\r\n\r\n            setMessage('Your password is changed successfully. Next time keep it remember.')\r\n\r\n            history.push('/login')\r\n\r\n        }\r\n        setMessage('')\r\n\r\n    }, [success, history , new_password , re_new_password])\r\n\r\n    return (\r\n        <FormContainer >\r\n            {error && <Message variant='danger'>{error}</Message>}\r\n            {loading && <Loader />}\r\n            {message && <Message variant='danger'>{message}</Message>}\r\n            <Form onSubmit={e => onSubmit(e)}>\r\n                <Form.Group className='form-group'>\r\n                    <Form.Control\r\n                        className='form-control'\r\n                        type='password'\r\n                        placeholder='New Password'\r\n                        name='new_password'\r\n                        value={new_password}\r\n                        onChange={e => onChange(e)}\r\n                        minLength='8'\r\n                        required\r\n                    >\r\n\r\n                    </Form.Control>\r\n                </Form.Group>\r\n                <p></p>\r\n                <Form.Group className='form-group'>\r\n                    <Form.Control\r\n                        className='form-control'\r\n                        type='password'\r\n                        placeholder='Confirm New Password'\r\n                        name='re_new_password'\r\n                        value={re_new_password}\r\n                        onChange={e => onChange(e)}\r\n                        minLength='8'\r\n                        required\r\n                    />\r\n                </Form.Group>\r\n                <br></br>\r\n                <Button className='btn btn-primary' type='submit'>Reset Password</Button>\r\n            </Form>\r\n        </FormContainer>\r\n    )\r\n}\r\n\r\nexport default ResetPasswordConfirmScreen\r\n"]},"metadata":{},"sourceType":"module"}